// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// simple_counter //
// -------------- //

#define simple_counter_wrap_target 2
#define simple_counter_wrap 11

#define simple_counter_offset_start 0u

static const uint16_t simple_counter_program_instructions[] = {
    0xe020, //  0: set    x, 0                       
    0xe041, //  1: set    y, 1                       
            //     .wrap_target
    0x4060, //  2: in     null, 32                   
    0x4001, //  3: in     pins, 1                    
    0x00cb, //  4: jmp    pin, 11                    
    0x008b, //  5: jmp    y--, 11                    
    0xa029, //  6: mov    x, !x                      
    0x0048, //  7: jmp    x--, 8                     
    0xa029, //  8: mov    x, !x                      
    0xa0c1, //  9: mov    isr, x                     
    0x8020, // 10: push   block                      
    0xa046, // 11: mov    y, isr                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program simple_counter_program = {
    .instructions = simple_counter_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config simple_counter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + simple_counter_wrap_target, offset + simple_counter_wrap);
    return c;
}

static inline void pio_counter_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_config c = pio_counter_program_get_default_config(offset);
    sm_config_set_in(&c, pin, 1);
    pio_pull_down(pin);
    sm_config_set_in_shift(&c, false, false, 32);
    pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);
	sm_config_set_clkdiv(&c, 1.0);
    pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

static inline void encoder_request_count(PIO pio, uint sm) {
	pio->rxf[sm];
}
static inline int32_t encoder_fetch_count(PIO pio, uint sm) {
	while (pio_sm_is_rx_fifo_empty(pio, sm))
		tight_loop_contents();
	return pio->rxf[sm];
}
static inline int32_t encoder_get_count(PIO pio, uint sm) {
	encoder_request_count(pio, sm);
	return encoder_fetch_count(pio, sm);
}

#endif
