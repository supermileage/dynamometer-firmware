.program pio_counter
; Transmit one bit every 16 cycles. In each bit period:
; - A '0' is encoded as a transition at the start of the bit period
; - A '1' is encoded as a transition at the start *and* in the middle
;
; Side-set bit 0 must be mapped to the data output pin.
; Autopull must be enabled

public start:
    set y, 0                ; y is counter
    set x, 1                ; last_read_val = 1
.wrap_target
    mov isr, null           ; clear isr
    jmp pin, increment      ; pin is high--try increment
    jmp check_poll          ; pin is low--don't increment
increment:
    jmp x--, update_prev    ; increment iff prev_read_val == 0
    mov y, !y               ; hack some bits
    jmp y--, next           ;
next:
    mov y, !y               ;
update_prev:
    set x, 1                ; cur_read_val = 1
    mov isr, x              ; isr = cur_read_val
check_poll:
    set x, 0                ; set x to zero for pull noblock
    pull noblock            ; check tx fifo
    mov x, osr              ; x = tx_val
    mov osr, isr            ; osr = cur_read_val
    jmp !x, final           ; if tx_val is 1, load current_count into rx
    mov isr, y              ; move current count to isr
    push noblock            ; push isr to rx fifo
final:
    mov x, osr              ; x = last_read
.wrap


% c-sdk {
static inline void pio_counter_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    gpio_pull_up(pin);

    pio_sm_config c = pio_counter_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    sm_config_set_in_shift(&c, false, true, 32);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);
    sm_config_set_clkdiv(&c, 8.0);
    
    pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

static inline void pio_counter_request_count(PIO pio, uint sm) {
	pio->txf[sm] = 1;
}

static inline int32_t pio_counter_fetch_count(PIO pio, uint sm) {
	while (pio_sm_is_rx_fifo_empty(pio, sm))
		tight_loop_contents();
	return pio->rxf[sm];
}

static inline int32_t pio_counter_get_count(PIO pio, uint sm) {
	pio_counter_request_count(pio, sm);
	return pio_counter_fetch_count(pio, sm);
}
%}